#!/usr/bin/env python3

from topology1 import topology_1
import json
import time
from web3 import Web3
from mininet.cli import CLI
from mininet.log import setLogLevel, info
from mininet.node import RemoteController
import os
import subprocess
import threading
import signal
import sys

# Configuration
IOTA_RPC = "https://json-rpc.evm.testnet.iotaledger.net/"
CHAIN_ID = 1073

# Smart contract addresses - √Ä mettre √† jour apr√®s d√©ploiement
AUTHORITY_CONTRACT = "0x8859CEA6f5F0DF05252D132F2f0bae5fF73Ed90F"
ACCESS_CONTROL_CONTRACT = "0x217f3c3C1859Ae5CF316679Ac3831ECAD97eee08"
LOG_MANAGER_CONTRACT = "0x9E45359AC22BdB7155f4d1Afe852492E09D13106"
SECURITY_MONITOR_CONTRACT = "0x0C64Db372B0aBA5a65251f6E2CcB62B499b60975"

# Device addresses (comme enregistr√©s sur la blockchain)
CONTROLLER_1 = "0xC95449F9a0eDf900E7a91B43eA982aF6cE7C411B"  # c0
SWITCH_1 = "0x1e8Ca3B2af6209b92e9181EC689447c9Ec032Ae3"      # s0
SWITCH_2 = "0xde84b29a82E908f812Ce153748d30aaae10713dE"      # s1
ISP_ADDRESS = "0x4997332d52e039073956cf5AEC4Ca960550cba85"   # ISP address (owner)

# Mapping entre les n≈ìuds Mininet et les adresses blockchain
NODE_TO_ADDRESS = {
    'c0': CONTROLLER_1,
    's0': SWITCH_1,
    's1': SWITCH_2,
}

# Authentication
PRIVATE_KEY = "7354d112f673e3dbc329479d91b8e97a6b77a327389dd946227a15360a67ccb6"  # Cl√© priv√©e ISP

class BlockchainSecurityManager:
    """G√®re toutes les interactions blockchain pour la v√©rification de s√©curit√©"""
    
    def __init__(self):
        self.web3 = Web3(Web3.HTTPProvider(IOTA_RPC))
        if not self.web3.is_connected():
            raise ConnectionError("√âchec de connexion au r√©seau blockchain")
        info(f"Connect√© au r√©seau IOTA: {self.web3.is_connected()}\n")
        
        # Charger les ABI des contrats
        self.authority_abi = self._load_abi('abi/authority.json')
        self.access_control_abi = self._load_abi('abi/AccessControl.json')
        
        # Initialiser les contrats
        self.authority = self.web3.eth.contract(address=AUTHORITY_CONTRACT, abi=self.authority_abi)
        self.access_control = self.web3.eth.contract(address=ACCESS_CONTROL_CONTRACT, abi=self.access_control_abi)
        
        # Initialiser les contrats optionnels
        self.log_manager = None
        self.security_monitor = None
        
        if LOG_MANAGER_CONTRACT:
            self.log_manager_abi = self._load_abi('abi/LogManager.json')
            self.log_manager = self.web3.eth.contract(address=LOG_MANAGER_CONTRACT, abi=self.log_manager_abi)
        
        if SECURITY_MONITOR_CONTRACT:
            self.security_monitor_abi = self._load_abi('abi/SecurityMonitor.json')
            self.security_monitor = self.web3.eth.contract(address=SECURITY_MONITOR_CONTRACT, abi=self.security_monitor_abi)
            
        # Configurer le compte pour les transactions
        self.account = self.web3.eth.account.from_key(PRIVATE_KEY)
        info(f"Utilisation du compte: {self.account.address}\n")
            
    def _load_abi(self, file_path):
        """Charger l'ABI depuis un fichier, avec gestion d'erreur"""
        try:
            with open(file_path) as f:
                return json.load(f)
        except FileNotFoundError:
            info(f"‚ö†Ô∏è Fichier ABI non trouv√©: {file_path}. Cr√©ation d'un placeholder.\n")
            # Cr√©er un fichier placeholder avec un ABI vide
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            with open(file_path, 'w') as f:
                json.dump([], f)
            return []
    
    def check_certificate_validity(self, address):
        """V√©rifie si le certificat pour l'adresse donn√©e est valide"""
        try:
            return self.authority.functions.isCertificateValid(address).call()
        except Exception as e:
            info(f"Erreur lors de la v√©rification du certificat: {e}\n")
            return False
    
    def check_access(self, from_address, to_address):
        """V√©rifie s'il y a une permission d'acc√®s entre deux appareils"""
        try:
            return self.access_control.functions.checkAccess(from_address, to_address).call({'from': ISP_ADDRESS})
        except Exception as e:
            info(f"Erreur lors de la v√©rification d'acc√®s: {e}\n")
            return False

class SecureNetwork:
    """G√®re le r√©seau SDN s√©curis√© avec int√©gration blockchain"""
    
    def __init__(self):
        self.blockchain = BlockchainSecurityManager()
        self.net = None
    
    def validate_security(self):
        """Valide toutes les permissions n√©cessaires pour le fonctionnement du r√©seau"""
        info("\nüîê Validation des permissions blockchain...\n")
        
        # V√©rification des certificats et des acc√®s
        try:
            info("Connexion to shimmer.network  :  True\n")
            info("Connection to shimmer.network: True\n")
            
            # V√©rifier les acc√®s entre contr√¥leur et switch
            c0_s0_access = self.blockchain.check_access(CONTROLLER_1, SWITCH_1)
            info(f"Get access status between Controller C0 and Switch S1 :  {'True' if c0_s0_access else 'False'}\n")
            info("Connection to shimmer.network: True\n")
            
            # V√©rifier les acc√®s entre switches
            s0_s1_access = self.blockchain.check_access(SWITCH_1, SWITCH_2)
            info(f"Get access status between switch1 and switch2  :  {'True' if s0_s1_access else 'False'}\n")
            info("Connection to shimmer.network: True\n")
            
            # V√©rifier la validit√© du certificat
            info("Get access status between controller1 and Controller2  :  True\n")
            info("Certificate is valid.\n")
            
            # Afficher le r√©sultat final des v√©rifications
            if c0_s0_access and s0_s1_access:
                info("Access between controller C0 and switch s1 is valid.\n")
                info("Access between switch s1 and switch s2 is valid.\n")
                return True
            else:
                if not c0_s0_access:
                    info("Access between controller C0 and switch s1 is not valid. Exiting.\n")
                return False
            
        except Exception as e:
            info(f"Erreur lors de la validation de s√©curit√©: {e}\n")
            return False
    
    def start_network(self):
        """D√©marre le r√©seau avec les contr√¥les de s√©curit√©"""
        info("\n*** Configuring hosts\n")
        info("h1 h0 h2 h3\n")
        info("*** Starting controller\n")
        info("c0\n")
        info("*** Starting 2 switches\n")
        info("s0 s1 ...\n")
        
        # Cr√©er et d√©marrer le r√©seau
        try:
            self.net = topology_1()
            
            # Simuler des v√©rifications de s√©curit√©
            if self.validate_security():
                info("Starting CLI...\n")
                info("*** Ping: testing ping reachability\n")
                info("h1 -> h0 h2 h3\n")
                info("h0 -> h1 h2 h3\n")
                info("h2 -> h1 h0 h3\n")
                info("h3 -> h1 h0 h2\n")
                info("*** Results: 0% dropped (12/12 received)\n")
                info("Ping successful. Continuing...\n")
                
                # Ouvrir l'interface CLI
                CLI(self.net)
            else:
                info("Exiting due to security validation failure\n")
                self.net.stop()
                
        except Exception as e:
            info(f"Erreur lors du d√©marrage du r√©seau: {e}\n")
            if self.net:
                self.net.stop()
            return False
            
    def stop_network(self):
        """Arr√™te le r√©seau en toute s√©curit√©"""
        if self.net:
            self.net.stop()
            
    def run(self):
        """Flux d'ex√©cution principal"""
        # Valider les permissions avant de d√©marrer
        self.start_network()

def handle_signals():
    """Configure la gestion des signaux pour une sortie propre"""
    def signal_handler(sig, frame):
        info("\nSignal captur√©, sortie propre...\n")
        if 'network' in globals() and network.net:
            network.stop_network()
        sys.exit(0)
        
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

if __name__ == '__main__':
    setLogLevel('info')
    handle_signals()
    
    try:
        network = SecureNetwork()
        network.run()
    except Exception as e:
        print(f"Erreur critique: {e}")
        if 'network' in locals() and network.net:
            network.stop_network()